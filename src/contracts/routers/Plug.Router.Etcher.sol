// SPDX-License-Identifier: MIT

pragma solidity ^0.8.23;

import { PlugRouter } from "./Plug.Router.sol";
import { PlugSocketLib } from "../abstracts/Plug.Socket.sol";

/**
 * @title Plug Router Etcher
 * @notice Etch the contract into the forge vm via create2 for test-only purposes.
 * @dev Under no circumstances should you ever use this outside of testing.
 * @author nftchance (chance@utc24.io)
 * @author vectorized.eth (https://github.com/Vectorized/multicaller/blob/main/src/MulticallerEtcher.sol)
 */
library PlugRouterEtcher {
    bytes internal constant PLUG_ROUTER_INITCODE =
        hex"6080806040523461001b5760016000556117bd90816100218239f35b600080fdfe6080604052600436101561001e575b361561001957600080fd5b611207565b60003560e01c806319cac9421461014e57806329301c481461014957806334bb370014610144578063450e94e91461013f57806345df31421461013a578063484ac06114610135578063541a6049146101305780635b9459991461012b5780635d7bd850146101265780635f5ff29d14610121578063757bc36a1461011c5780638138d3c5146101175780638175cccf14610112578063c3dbb7ad1461010d578063cfd8e4f214610108578063dfe86ac514610103578063e55bd45b146100fe578063f51e4d5d146100f95763ff38a1750361000e57610c9f565b610c49565b610c31565b610c13565b610b30565b610a13565b610975565b61093b565b610901565b6108c7565b6108af565b610885565b610843565b61082b565b6107ce565b610794565b6106dd565b6106c5565b610378565b634e487b7160e01b600052604160045260246000fd5b606081019081106001600160401b0382111761018457604052565b610153565b60a081019081106001600160401b0382111761018457604052565b604081019081106001600160401b0382111761018457604052565b608081019081106001600160401b0382111761018457604052565b90601f801991011681019081106001600160401b0382111761018457604052565b6001600160401b0381116101845760051b60200190565b35906001600160a01b038216820361022657565b600080fd5b6001600160401b03811161018457601f01601f191660200190565b81601f820112156102265780359061025d8261022b565b9261026b60405194856101da565b8284526020838301011161022657816000926020809301838601378301015290565b3590811515820361022657565b91909160608184031261022657604051906102b482610169565b81936102bf82610212565b83526020820135906001600160401b03821161022657826102e9604094926102f494869401610246565b60208601520161028d565b910152565b81601f8201121561022657803591602091610313846101fb565b9361032160405195866101da565b808552838086019160051b8301019280841161022657848301915b84831061034c5750505050505090565b82356001600160401b03811161022657869161036d8484809489010161029a565b81520192019161033c565b34610226576020366003190112610226576004356001600160401b038111610226576103b26103ad60209236906004016102f9565b610d1a565b604051908152f35b919060608382031261022657604051906103d382610169565b81936103de81610212565b8352602081013560208401526040810135916001600160401b038311610226576040926102f49201610246565b91909160a081840312610226576040519061042582610189565b819361043082610212565b8352602082013560208401526040820135906001600160401b0382116102265782610464608094926102f4948694016102f9565b6040860152606081013560608601520161028d565b91906040838203126102265760405190610492826101a4565b81938035916001600160401b039283811161022657816104b391840161040b565b84526020820135928311610226576020926102f49201610246565b81601f82011215610226578035916020916104e8846101fb565b936104f660405195866101da565b808552838086019160051b8301019280841161022657848301915b8483106105215750505050505090565b82356001600160401b03811161022657869161054284848094890101610479565b815201920191610511565b919091606081840312610226576040519061056782610169565b81938135906001600160401b039182811161022657816105889185016103ba565b8452602083013591821161022657826102e9604094926102f4948694016104ce565b81601f82011215610226578035916020916105c4846101fb565b936105d260405195866101da565b808552838086019160051b8301019280841161022657848301915b8483106105fd5750505050505090565b82356001600160401b03811161022657869161061e8484809489010161054d565b8152019201916105ed565b919082604091031261022657604051610641816101a4565b6020808294803584520135910152565b9190606083820312610226576040519061066a826101a4565b81938035916001600160401b038311610226576020826106908383966102f496016105aa565b865201610629565b602060031982011261022657600435906001600160401b038211610226576106c291600401610651565b90565b346102265760206103b26106d836610698565b610d63565b346102265760031960203682011261022657600435906001600160401b03908183116102265760809083360301126102265760405161071b816101bf565b8260040135828111610226576107379060043691860101610246565b81526024830135918211610226576107766064610790946107616107809560043691840101610246565b60208501526044810135604085015201610212565b6060820152610db0565b6040519081529081906020820190565b0390f35b34610226576020366003190112610226576004356001600160401b038111610226576103b26107c960209236906004016103ba565b610e3e565b346102265760403660031901126102265760206103b26040516107f0816101a4565b600435815260243583820152610ea2565b602060031982011261022657600435906001600160401b038211610226576106c29160040161040b565b346102265760206103b261083e36610801565b610eec565b346102265760206103b261085636610801565b610efa565b602060031982011261022657600435906001600160401b038211610226576106c291600401610479565b3461022657602061089d6108983661085b565b610f8e565b6040516001600160a01b039091168152f35b346102265760206103b26108c23661085b565b610fa7565b34610226576020366003190112610226576004356001600160401b038111610226576103b26108fc60209236906004016104ce565b611000565b34610226576020366003190112610226576004356001600160401b038111610226576103b2610936602092369060040161054d565b611043565b34610226576020366003190112610226576004356001600160401b038111610226576103b261097060209236906004016105aa565b6110aa565b34610226576020366003190112610226576004356001600160401b038111610226576103b26109aa602092369060040161029a565b6110ed565b919060408382031261022657604051906109c8826101a4565b81938035916001600160401b039283811161022657816104b3918401610651565b602060031982011261022657600435906001600160401b038211610226576106c2916004016109af565b34610226576020610a23366109e9565b81610a2e825161119d565b91015182815191012060405190838201927f62f30595f4177d43243112a959ea1be53d5882871b1cc6917311b8d1fe83793c84526040830152606082015260608152610a79816101bf565b519020604051908152f35b60005b838110610a975750506000910152565b8181015183820152602001610a87565b90602091610ac081518092818552858086019101610a84565b601f01601f1916010190565b6020808201906020835283518092526040830192602060408460051b8301019501936000915b848310610b025750505050505090565b9091929394958480610b20600193603f198682030187528a51610aa7565b9801930193019194939290610af2565b60031960203682011261022657600435906001600160401b0382116102265760409082600401923603011261022657610b7b610b74610b6f36846109af565b6111f7565b9180611153565b610b883660208301610629565b80516001600160a01b0384166000908152600160209081526040808320948201518352939052918220805490926000198214610bff575060010180925503610bed5761079091610bdb82610be193611168565b906113b1565b60405191829182610acc565b604051633ab3447f60e11b8152600490fd5b634e487b7160e01b81526011600452602490fd5b34610226576000366003190112610226576020600054604051908152f35b346102265760206103b2610c4436610698565b61119d565b6020366003190112610226576004356001600160401b038082116102265736602383011215610226578160040135908111610226573660248260051b840101116102265761079091610be19160243392016113b1565b3461022657602061089d610b6f366109e9565b634e487b7160e01b600052603260045260246000fd5b8051821015610cdc5760209160051b010190565b610cb2565b6040610d189193929381519481610d02879351809260208087019101610a84565b82019060208201520360208101855201836101da565b565b6060906000908051905b818310610d38575050506020815191012090565b909192610d5a600191610d54610d4e8786610cc8565b516110ed565b90610ce1565b93019190610d24565b610d9c610daa610d756000549361119d565b604051928391602083019586909160429261190160f01b8352600283015260228201520190565b03601f1981018352826101da565b51902090565b8051602081519101209060208101516020815191012090604081015190606060018060a01b0391015116906040519260208401947f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f865260408501526060840152608083015260a082015260a0815260c081018181106001600160401b038211176101845760405251902090565b60018060a01b038151169060406020820151910151602081519101206040519160208301937fba015bd32610c44647c4bcbb8c645ee60d5957ae5e7aa37e56c897d9295af65a855260408401526060830152608082015260808152610daa81610189565b602081519101516040519060208201927f276c12ec467e6d60d25741105b112102c28092173b15ca9db916c654ad913d7c84526040830152606082015260608152610daa816101bf565b610d9c610daa610d75600054935b60018060a01b0381511690602081015190610f186040820151610d1a565b90608060608201519101511515916040519360208501957febe783112b2088c6a788530144d3c69021fe5d4d46f650940d6bfaf88b54e3f7875260408601526060850152608084015260a083015260c082015260c0815260e081018181106001600160401b038211176101845760405251902090565b6106c2906020610f9e8251610eec565b91015190611213565b6020610fb38251610efa565b910151602081519101206040519060208201927ffbb5bac87a66a98421e535854c88c14ea8206480ff93a62baef88eb37969745584526040830152606082015260608152610daa816101bf565b6060906000908051905b81831061101e575050506020815191012090565b90919261103a600191610d546110348786610cc8565b51610fa7565b9301919061100a565b61104d8151610e3e565b90604061105d6020830151611000565b91015115156040519160208301937fd88a558de6e76ae3b06e4691e5c7eb27632ad144c564c3c807b9b011d3207c89855260408401526060830152608082015260808152610daa81610189565b6060906000908051905b8183106110c8575050506020815191012090565b9091926110e4600191610d546110de8786610cc8565b51611043565b930191906110b4565b60018060a01b0381511690604060208201516020815191012091015115156040519160208301937f11d2e7ce7b01636231a80046eb2467257c3ea77c5a408e6ddd3d0899cfbc7379855260408401526060830152608082015260808152610daa81610189565b903590605e1981360301821215610226570190565b903590601e198136030182121561022657018035906001600160401b03821161022657602001918160051b3603831361022657565b6111b460206111ac83516110aa565b920151610ea2565b6040519060208201927f47c7cdc8df0e6a9774c8b8955db068ee1707012a385dae083e0190f51ab2f4e584526040830152606082015260608152610daa816101bf565b6106c2906020610f9e8251610d63565b600054600c5260206000f35b91909160206001608060008294839060408099815198611251575b5050505afa51923d1561124357600060605252565b638baa579f6000526004601cfd5b84928352878082015183528282511461129157604182511461127a57505050905038888161122e565b60609384830151901a90520151905238888161122e565b9250015190601b8260ff1c019052848060ff1b031660605238888161122e565b906112bb826101fb565b6112c860405191826101da565b82815280926112d9601f19916101fb565b019060005b8281106112ea57505050565b8060606020809385010152016112de565b6040519061130882610169565b606060408360008152600060208201520152565b6040519061132982610169565b60006040836113366112fb565b8152606060208201520152565b6040519061135082610189565b6000608083828152826020820152606060408201528260608201520152565b6040519061137c826101a4565b6060602083611389611343565b81520152565b90821015610cdc576106c29160051b810190611153565b6106c290369061054d565b9291909260009081549260019384161561158a576113ce866112b1565b95838491856113db61131c565b506113e461136f565b506113ed611343565b506113f66112fb565b505b8183106114085750505050505055565b61141b61141684848961138f565b6113a6565b938791898651936020809801805151156000146114a1575050505050849285945b6001600160a01b038781169087160361148f578251604084015191909301518a93611472928792916001600160a01b0316611685565b61147c828d610cc8565b52611487818c610cc8565b5001916113f8565b604051632057875960e21b8152600490fd5b90918b9893979498905b6114b8575b50505061143c565b8151805182101561158457816114cd91610cc8565b516114d781610f8e565b8215611579575b6001600160a01b038b811691160361148f57805193858501510361156757908d809460408f959461150e90610fa7565b959101915b611524575b505083019091926114ab565b8882939495969251805183101561155a57878392611546869561154c94610cc8565b516115c7565b505001819594939291611513565b5050819594939250611518565b60405163f0352c1b60e01b8152600490fd5b9950899850886114de565b506114b0565b63ab143c0683526004601cfd5b3d156115c2573d906115a88261022b565b916115b660405193846101da565b82523d6000602084013e565b606090565b9160009190829182604061165360018060a01b0393848951169561163f60208b01519660608651968795611613602088019b6308d7667160e11b8d528460248a01526084890190610aa7565b936023198886030160448901528151168452602081015160208501520151918160408201520190610aa7565b90606483015203601f1981018352826101da565b51925af191611660611597565b9183159081611677575b5061167157565b506116fb565b60400151151590503861166a565b909193926000928392839260601b835560405196602083519301915af1156116aa5750565b8080803e80fd5b604051906116be826101a4565b601b82527f506c7567436f72653a7461726765742d70616e69636b65642d307800000000006020830152565b9060206106c2928181520190610aa7565b6004815110611779576020810180519091906001600160e01b031916634e487b7160e01b14611728575190fd5b6117759060246117366116b1565b91015160208201908151906030600f81818416019260041c160160081b179061ffff191617905260405191829162461bcd60e51b8352600483016116ea565b0390fd5b60405162461bcd60e51b815260206004820152600f60248201526e141b1d59d0dbdc994e9c995d995c9d608a1b6044820152606490fdfea164736f6c6343000817000a";
    bytes32 internal constant PLUG_ROUTER_CREATE2_SALT =
        0x0000000000000000000000000000000000000000cb7b60a74416b000074195c8;

    /**
     * @dev Deploys the Router and returns the accessible interface reference.
     */
    function router() internal returns (PlugRouter deployment) {
        address expectedDeployment = PlugSocketLib.PLUG_ROUTER;
        if (_extcodesize(expectedDeployment) == 0) {
            bytes32 salt = PLUG_ROUTER_CREATE2_SALT;
            address d = _safeCreate2(salt, PLUG_ROUTER_INITCODE);
            require(d == expectedDeployment, "Unable to etch PlugRouter.");
            deployment = PlugRouter(payable(d));
        }
    }

    /**
     * @dev Deploys a contract via 0age's immutable create 2 factory for testing.
     */
    function _safeCreate2(bytes32 salt, bytes memory initializationCode) private returns (address deployment) {
        // Canonical address of 0age's immutable create 2 factory.
        address c2f = 0x0000000000FFe8B47B3e2130213B802212439497;
        if (_extcodesize(c2f) == 0) {
            bytes memory ic2fBytecode =
                hex"60806040526004361061003f5760003560e01c806308508b8f1461004457806364e030871461009857806385cf97ab14610138578063a49a7c90146101bc575b600080fd5b34801561005057600080fd5b506100846004803603602081101561006757600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166101ec565b604080519115158252519081900360200190f35b61010f600480360360408110156100ae57600080fd5b813591908101906040810160208201356401000000008111156100d057600080fd5b8201836020820111156100e257600080fd5b8035906020019184600183028401116401000000008311171561010457600080fd5b509092509050610217565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561014457600080fd5b5061010f6004803603604081101561015b57600080fd5b8135919081019060408101602082013564010000000081111561017d57600080fd5b82018360208201111561018f57600080fd5b803590602001918460018302840111640100000000831117156101b157600080fd5b509092509050610592565b3480156101c857600080fd5b5061010f600480360360408110156101df57600080fd5b508035906020013561069e565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205460ff1690565b600083606081901c33148061024c57507fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008116155b6102a1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260458152602001806107746045913960600191505060405180910390fd5b606084848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604051855195965090943094508b93508692506020918201918291908401908083835b6020831061033557805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016102f8565b51815160209384036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018019909216911617905260408051929094018281037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00183528085528251928201929092207fff000000000000000000000000000000000000000000000000000000000000008383015260609890981b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016602183015260358201969096526055808201979097528251808203909701875260750182525084519484019490942073ffffffffffffffffffffffffffffffffffffffff81166000908152938490529390922054929350505060ff16156104a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603f815260200180610735603f913960400191505060405180910390fd5b81602001825188818334f5955050508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161461053a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260468152602001806107b96046913960600191505060405180910390fd5b50505073ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790559392505050565b6000308484846040516020018083838082843760408051919093018181037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001825280845281516020928301207fff000000000000000000000000000000000000000000000000000000000000008383015260609990991b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166021820152603581019790975260558088019890985282518088039098018852607590960182525085519585019590952073ffffffffffffffffffffffffffffffffffffffff81166000908152948590529490932054939450505060ff909116159050610697575060005b9392505050565b604080517fff000000000000000000000000000000000000000000000000000000000000006020808301919091523060601b6021830152603582018590526055808301859052835180840390910181526075909201835281519181019190912073ffffffffffffffffffffffffffffffffffffffff81166000908152918290529190205460ff161561072e575060005b9291505056fe496e76616c696420636f6e7472616374206372656174696f6e202d20636f6e74726163742068617320616c7265616479206265656e206465706c6f7965642e496e76616c69642073616c74202d206669727374203230206279746573206f66207468652073616c74206d757374206d617463682063616c6c696e6720616464726573732e4661696c656420746f206465706c6f7920636f6e7472616374207573696e672070726f76696465642073616c7420616e6420696e697469616c697a6174696f6e20636f64652ea265627a7a723058202bdc55310d97c4088f18acf04253db593f0914059f0c781a9df3624dcef0d1cf64736f6c634300050a0032";
            /// @solidity memory-safe-assembly
            assembly {
                let m := mload(0x40)
                mstore(m, 0xb4d6c782) // 'etch(address,bytes)'.
                mstore(add(m, 0x20), c2f)
                mstore(add(m, 0x40), 0x40)
                let n := mload(ic2fBytecode)
                mstore(add(m, 0x60), n)
                for { let i := 0 } lt(i, n) { i := add(0x20, i) } {
                    mstore(add(add(m, 0x80), i), mload(add(add(ic2fBytecode, 0x20), i)))
                }
                let vmAddress := 0x7109709ECfa91a80626fF3989D68f67F5b1DD12D
                if iszero(call(gas(), vmAddress, 0, add(m, 0x1c), add(n, 0x64), 0x00, 0x00)) { revert(0, 0) }
            }
        }
        /// @solidity memory-safe-assembly
        assembly {
            let m := mload(0x40)
            let n := mload(initializationCode)
            mstore(m, 0x64e03087) // 'safeCreate2(bytes32,bytes)'.
            mstore(add(m, 0x20), salt)
            mstore(add(m, 0x40), 0x40)
            mstore(add(m, 0x60), n)
            // prettier-ignore
            for { let i := 0 } lt(i, n) { i := add(i, 0x20) } {
                mstore(add(add(m, 0x80), i), mload(add(add(initializationCode, 0x20), i)))
            }
            if iszero(call(gas(), c2f, 0, add(m, 0x1c), add(n, 0x64), m, 0x20)) {
                returndatacopy(m, m, returndatasize())
                revert(m, returndatasize())
            }
            deployment := mload(m)
        }
    }

    /**
     * @dev Returns the extcodesize of 'deployment'.
     */
    function _extcodesize(address deployment) private view returns (uint256 result) {
        /// @solidity memory-safe-assembly
        assembly {
            result := extcodesize(deployment)
        }
    }
}